ss4S2 <- function(N, K=0, DEFF=1, conf=0.95, cve=0.05, me=0.03, plot=FALSE){
Z = 1 -((1 - conf)/2)
n0.me <- qnorm(Z)^2 * DEFF / (me^2)
n.me <- n0.me / ((N - 1)^3/(N^2*(K*N + 2*N + 2)) + n0.me / N)
n.cve <- N^2 * (K*N + 2*N + 2) * DEFF/(cve^2 * (N - 1)^3 + N * (K*N + 2*N + 2) * DEFF)
if(plot == TRUE){
nseq = seq(100,N,10)
cveseq = rep(NA,length(nseq))
meseq = rep(NA,length(nseq))
for(k in 1:length(nseq)){
fseq = nseq[k] / N
cveseq[k] = 100 * sqrt(N / nseq[k] * (1 - fseq) * DEFF * N * (K*N + 2*N + 2) / ((N - 1)^3))
meseq[k] = qnorm(Z) * cveseq[k]
}
par(mfrow=c(1,2))
plot(nseq,cveseq, type="l", lty=2, pch=1, col=3,ylab="Coefficient of variation %",xlab="Sample size")
points(n.cve, 100*cve, pch=8,bg = "blue")
abline(h=100*cve,lty=3)
abline(v=n.cve,lty=3)
plot(nseq,meseq, type="l", lty=2, pch=1, col=3,ylab="Relative margin of error %",xlab="Sample size")
points(n.me,100*me, pch=8,bg = "red")
abline(h=100*me,lty=3)
abline(v=n.me,lty=3)
}
msg <- cat('With the parameters of this function: N =', N, 'DEFF = ',
DEFF, 'conf =', conf, '.\n
The estimated sample size to obatin a maximun coefficient of variation of', 100*cve, '% is n=', ceiling(n.cve), '.
The estimated sample size to obatin a maximun relative margin of error of', 100*me, '% is n=', ceiling(n.me), '. \n \n')
result <- list(n.cve = ceiling(n.cve), n.me = ceiling(n.me))
result
}
ss4S2(N = 10000, K = 0, cve = 0.05, me = 0.03)
ss4S2(N = 10000, K = 1, cve = 0.05, me = 0.03)
ss4S2(N = 10000, K = 1, cve = 0.05, me = 0.05)
ss4S2(N = 10000, K = 1, cve = 0.05, me = 0.05, DEFF = 2)
ss4S2(N = 10000, K = 1, cve = 0.05, me = 0.03, plot = TRUE)
ss4S2(N = 10000, K = 1, cve = 0.05, me = 0.05, DEFF = 2)
ss4S2(N = 10000, K = 1, cve = 0.05, me = 0.03, plot = TRUE)
library(samplesize4surveys)
data(BigLucy)
attach(BigLucy)
N <- nrow(BigLucy)
library(timeDate)
install.packages("timeDate")
kurtosis
??kurtosis
??curtosis
kurtosis
ss4S2H <- function(N, S2, S20, K=0, DEFF=1, conf=0.95, power=0.8, plot=FALSE){
Za = conf
Zb = power
Z = qnorm(Za) + qnorm(Zb)
D = abs(S2 - S20)
n.hyp = S2^2 * DEFF / (D^2 * (N - 1)^3/(Z^2 * N^2 * (K*N + 2*N + 2)) + S2^2 * DEFF / N)
n.hyp = ceiling(n.hyp)
if (plot == TRUE) {
nseq = seq(100, N, 10)
Dseq = rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq = nseq[k]/N
varseq = DEFF * (1/fseq) * (1 - fseq) * N * (K*N + 2*N + 2) * (S2^2) * (qnorm(Za) + qnorm(Zb))^2 / ((N - 1)^3)
Dseq[k] = sqrt(varseq)
}
plot(nseq, Dseq, type = "l", lty = 2, pch = 1, col = 3,
ylab = "Null effect (D) ", xlab = "Sample size")
points(n.hyp, D, pch = 8, bg = "blue")
abline(h = D, lty = 3)
abline(v = n.hyp, lty = 3)
}
result = n.hyp
result
}
ss4S2H(N = 10000, S2 = 120, S20 = 110, K = 0)
ss4S2H(N = 10000, S2 = 120, S20 = 110, K = 2, DEFF = 2, power = 0.9)
ss4S2H(N = 10000, S2 = 120, S20 = 110, K = 2, DEFF = 2, power = 0.8, plot = TRUE)
D = 8000
S20 = S2 - D
data(BigLucy)
attach(BigLucy)
N <- nrow(BigLucy)
S2 <- var(BigLucy$Income)
# The minimum sample size for testing
# H_0: S2 - S2_0 = 0   vs.   H_a: S2 - S2_0 = D = 8000
D = 8000
S20 = S2 - D
S20 = S2 - D
K <- kurtosis(Lucy$Income)
K <- kurtosis(BigLucy$Income)
library(timeDate)
K <- kurtosis(BigLucy$Income)
K
ss4S2H(N, S2, S20, K, DEFF=1, conf = 0.99, power = 0.8, plot=TRUE)
K <- kurtosis(BigLucy$Income)
ss4S2H(N, S2, S20, K, DEFF=1, conf = 0.99, power = 0.8, plot=TRUE)
K
ss4S2H(N, S2, S20, K, DEFF=1, conf = 0.99, power = 0.8, plot=TRUE)
b4S2 <- function (N, n, S2, S20, K=0, DEFF = 1, conf = 0.95, power = 0.8, plot = FALSE){
Za = conf
Zb = power
Z = qnorm(Za) + qnorm(Zb)
D = abs(S2 - S20)
f = n/N
VAR = DEFF * (1/n) * (1 - f) * N^2 * (K*N + 2*N +2) * S2^2 / ((N - 1)^3)
beta = 100 * (1 - pnorm(Za - (D / sqrt(VAR))))
if (plot == TRUE) {
nseq = seq(1, N, 10)
betaseq = rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq = nseq[k]/N
varseq = DEFF * (1/nseq[k]) * (1 - fseq) * N^2 * (K*N + 2*N +2) * S2^2 / ((N - 1)^3)
betaseq[k] = 100 * (1 - pnorm(Za - (D /sqrt(varseq))))
}
plot(nseq, betaseq, type = "l", lty = 1, pch = 1, col = 3,
ylab = "Power of the test (%)", xlab = "Sample Size")
points(n, beta, pch = 8, bg = "blue")
abline(h = beta, lty = 3)
abline(v = n, lty = 3)
}
msg <- cat("With the parameters of this function: N =", N,
"n = ", n, "S2 =", S2, "S20 =", S20, "Kurtosis =", K, "D =", D, "DEFF = ", DEFF, "conf =",
conf, ". \nThe estimated power of the test is ", beta,
". \n \n")
result <- list(Power = beta)
result
}
e4S2 <- function (N, n, K=0, DEFF = 1, conf = 0.95, plot = FALSE) {
Z = 1 - ((1 - conf)/2)
f <- n/N
CVE <- 100* sqrt(DEFF * N^2 * (K*N + 2*N + 2) * (1 - f)  / (n * (N - 1)^3))
ME <- qnorm(Z) * CVE
if (plot == TRUE) {
nseq <- seq(1, N, 10)
cveseq <- rep(NA, length(nseq))
meseq <- rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq <- nseq[k]/N
cveseq[k] <- 100* sqrt(DEFF * N^2 * (K*N + 2*N + 2) * (1 - fseq)  / (nseq[k] * (N - 1)^3))
meseq[k] <- qnorm(Z) * cveseq[k]
}
par(mfrow = c(1, 2))
plot(nseq, cveseq, type = "l", lty = 1, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Sample Size")
points(n, CVE, pch = 8, bg = "blue")
abline(h = CVE, lty = 3)
abline(v = n, lty = 3)
plot(nseq, meseq, type = "l", lty = 1, pch = 1, col = 3,
ylab = "Margin of error", xlab = "Sample Size")
points(n, ME, pch = 8, bg = "blue")
abline(h = ME, lty = 3)
abline(v = n, lty = 3)
}
msg <- cat("With the parameters of this function: N =", N,
"n = ", n, "Kurtosis = ", K, "DEFF = ", DEFF, "conf =", conf,
". \nThe estimated coefficient of variation is ", CVE,
". \nThe margin of error is", ME, ". \n \n")
result <- list(cve = CVE, Margin_of_error = ME)
result
}
e4S2(N=10000, n=400, K = 0)
e4S2(N=10000, n=400, K = 1, DEFF = 2, conf = 0.99)
e4S2(N=10000, n=400, K = 2, DEFF = 2, conf = 0.99, plot=TRUE)
data(BigLucy)
attach(BigLucy)
library(TeachingSampling)
attach(BigLucy)
N <- nrow(BigLucy)
S2 <- var(BigLucy$Income)
K <- kurtosis(BigLucy$Income)
S2 <- var(BigLucy$Income)
K <- kurtosis(BigLucy$Income)
e4S2(N, n = 2000, K, DEFF = 2, conf = 0.99, plot=TRUE)
#############################
# Example with BigLucy data #
#############################
data(BigLucy)
attach(BigLucy)
N <- nrow(BigLucy)
S2 <- var(BigLucy$Income)
S2 <- var(BigLucy$Income)
S2
S20 <- 71000
K <- kurtosis(BigLucy$Income)
b4S2(N, n = 2000, S2, S20, K, DEFF = 2.5, plot = TRUE)
library(samplesize4surveys)
library(timeDate)
install.library(timeDate)
install.packages(timeDate)
library(samplesize4surveys)
install.packages("devtools")
library(samplesize4surveys)
install.packages("roxygen2")
install.packages("timeDate")
install.packages("knitr")
install.packages("testthat")
library(samplesize4surveys)
library(samplesize4surveys)
install.packages("rmarkdown")
install.packages("samplesize4surveys")
install.packages("installr")
install.packages("roxygen2")
install.packages("knitr")
install.packages("TeachingSampling")
install.packages("timeDate")
install.packages("knitr")
library(samplesize4surveys)
install.packages("testthat")
devtools::build_win()
install.packages("devtools")
devtools::build_win()
library(samplesize4surveys)
library(samplesize4surveys)
library(samplesize4surveys)
library(samplesize4surveys)
install.packages("roxygen2")
library(samplesize4surveys)
library(samplesize4surveys)
library(samplesize4surveys)
install.packages(c("abind", "arm", "betareg", "bookdown", "car", "cluster", "codetools", "curl", "effects", "foreign", "GGally", "git2r", "haven", "httr", "irlba", "jsonlite", "knitr", "lattice", "lavaan", "Matrix", "mgcv", "mime", "mirt", "msm", "multcomp", "nlme", "numDeriv", "openssl", "packrat", "psych", "quantreg", "R6", "RcppArmadillo", "RcppEigen", "RgoogleMaps", "rmarkdown", "rstudioapi", "shiny", "sjmisc", "sjPlot", "SparseM", "spdep", "stringdist", "stringi", "survival", "tidyr", "withr"))
library(samplesize4surveys)
install.packages("devtools")
library(devtools)
install_github("psirusteam/samplesize4surveys")
install.packages(devtools+)
install.packages(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio/addinexamples", type = "source")
addinexamples:::reformatAddin()
ss4dp = function(N, P1, P2, DEFF = 1, conf = 0.95, cve = 0.05,
me = 0.03, T = 0, R = 1, plot = FALSE) {
Q1 = 1 - P1
Q2 = 1 - P2
S2 <- (P1 * Q1 + P2 * Q2) * (1 - (T * R)) * DEFF
Z = 1 - ((1 - conf)/2)
n.cve <- S2/((P1 - P2)^2 * cve^2 + (S2/N))
n0.me <- (qnorm(Z)^2/me^2) * S2
n.me <- n0.me/(1 + (n0.me/N))
if (plot == TRUE) {
nseq = seq(100, N, 10)
cveseq = rep(NA, length(nseq))
meseq = rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq = nseq[k]/N
varseq = (1/nseq[k]) * (1 - fseq) * S2
cveseq[k] = 100 * sqrt(varseq)/abs(P1 - P2)
meseq[k] = 100 * qnorm(Z) * sqrt(varseq)
}
par(mfrow = c(1, 2))
plot(nseq, cveseq, type = "l", lty = 2, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Sample size")
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
plot(nseq, meseq, type = "l", lty = 2, pch = 1, col = 3,
ylab = "Margin of error %", xlab = "Sample size")
points(n.me, 100 * me, pch = 8, bg = "red")
abline(h = 100 * me, lty = 3)
abline(v = n.me, lty = 3)
}
msg <- cat("With the parameters of this function: N =", N,
"P1 =", P1, "P2 =", P2, "DEFF = ", DEFF, "conf =", conf,"T =",T,"R =",R,
".\n\n The estimated sample size (for each group or wave) to obtain a maximun coefficient of variation of",
100 * cve, "% is n=", ceiling(n.cve),
".\n The estimated sample size (for each group or wave) to obtain a maximun margin of error of",
100 * me, "% is n=", ceiling(n.me), ". \n \n")
result <- list(n.cve = ceiling(n.cve), n.me = ceiling(n.me))
result
}
data(BigLucy)
attach(BigLucy)
ss4dp(N=100000, P1=0.5, P2=0.55, cve=0.05, me=0.03)
ss4dp(N=100000, P1=0.5, P2=0.55, cve=0.05, me=0.03, plot=TRUE)
ss4dp(N=100000, P1=0.5, P2=0.55, DEFF=3.45, conf=0.99, cve=0.03, me=0.03, plot=TRUE)
devtools::install_github("rstudio/addinexamples", type = "source")
addinexamples:::reformatAddin()
ss4dm = function(N, mu1, mu2, sigma1, sigma2, DEFF = 1, conf = 0.95,
cve = 0.05, rme = 0.03, T = 0, R = 1, plot = FALSE) {
S2 = (sigma1^2 + sigma2^2) * (1 - (T * R)) * DEFF
Z = 1 - ((1 - conf)/2)
n.cve <- S2/((mu1 - mu2)^2 * cve^2 + (S2/N))
me <- rme * abs(mu1 - mu2)
n0 <- (qnorm(Z)^2/me^2) * S2
n.rme <- n0/(1 + (n0/N))
if (plot == TRUE) {
nseq = seq(100, N, 10)
cveseq = rep(NA, length(nseq))
meseq = rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq = nseq[k]/N
varseq = (1/nseq[k]) * (1 - fseq) * S2
cveseq[k] = 100 * sqrt(varseq)/abs(mu1 - mu2)
meseq[k] = 100 * qnorm(Z) * sqrt(varseq)
}
par(mfrow = c(1, 2))
plot(nseq, cveseq, type = "l", lty = 2, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Sample size")
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
plot(nseq, meseq, type = "l", lty = 2, pch = 1, col = 3,
ylab = "Margin of error %", xlab = "Sample size")
points(n.rme, 100 * me, pch = 8, bg = "red")
abline(h = 100 * me, lty = 3)
abline(v = n.rme, lty = 3)
}
msg <- cat("With the parameters of this function: N =", N,
"mu1 =", mu1, "mu2 =", mu2, "sigma1 = ", sigma1, "sigma2 = ",
sigma2, "DEFF = ", DEFF, "conf =", conf, ".\n
The estimated sample size to obtain a maximun coefficient of variation of",
100 * cve, "% is n=", ceiling(n.cve), ".
The estimated sample size to obtain a maximun margin of error of",
100 * rme, "% is n=", ceiling(n.rme), ". \n \n")
result <- list(n.cve = ceiling(n.cve), n.rme = ceiling(n.rme))
result
}
ss4dm(N=100000, mu1=50, mu2=55, sigma1 = 10, sigma2 = 12, cve=0.05, rme=0.03)
addinexamples:::reformatAddin()
addinexamples:::reformatAddin()
addinexamples:::reformatAddin()
addinexamples:::reformatAddin()
devtools::install_github("rstudio/addinexamples", type = "source")
addinexamples:::reformatAddin()
addinexamples:::reformatAddin()
addinexamples:::reformatAddin()
addinexamples:::reformatAddin()
addinexamples:::reformatAddin()
install.packages("roxygen2")
library(samplesize4surveys)
library(samplesize4surveys)
library(samplesize4surveys)
?Sys.timezone
Sys.timezone()
Sys.timezone(location = T)
options(tz="Chile")
Sys.timezone(location = T)
Sys.timezone()
Sys.setenv(TZ="Chile/")
Sys.getenv("TZ")
as.POSIXct(t, tz=getOption("tz"))
Sys.setenv(TZ="America/Chile")
Sys.getenv("TZ")
as.POSIXct(t, tz=getOption("tz"))
library(samplesize4surveys)
help(samplesize4surveys)
??samplesize4surveys
?samplesize4surveys
library(samplesize4surveys)
addinexamples:::reformatAddin()
e4p <- function(N, n, P, DEFF = 1, conf = 0.95, plot = FALSE) {
S2 <- P * (1 - P) * DEFF
Z <- 1 - ((1 - conf)/2)
f <- n/N
VAR <- (1/n) * (1 - f) * S2
CVE <- 100 * sqrt(VAR)/P
ME <- 100 * qnorm(Z) * sqrt(VAR)
if (plot == TRUE) {
pseq <- seq(0, 1, 0.005)
cveseq <- rep(NA, length(pseq))
rmeseq <- rep(NA, length(pseq))
for (k in 1:length(pseq)) {
S2seq[k] <- pseq[k] * (1 - pseq[k]) * DEFF
varseq[k] <- (1/n) * (1 - f) * S2seq[k]
cveseq[k] <- 100 * sqrt(varseq[k])/pseq[k]
rmeseq[k] <- 100 * qnorm(Z) * sqrt(varseq[k])
}
par(mfrow = c(1, 2))
plot(pseq, cveseq, type = "l", lty = 1, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Estimated proportion")
points(P, CVE, pch = 8, bg = "blue")
abline(h = CVE, lty = 3)
abline(v = P, lty = 3)
plot(pseq, rmeseq, type = "l", lty = 1, pch = 1, col = 3,
ylab = "Margin of error %", xlab = "Estimated proportion")
points(P, ME, pch = 8, bg = "blue")
abline(h = ME, lty = 3)
abline(v = P, lty = 3)
}
result <- list(cve = CVE, Margin_of_error = ME)
result
}
e4p(N=10000, n=400, P=0.5)
e4p(N=10000, n=400, P=0.5, plot=TRUE)
e4p <- function(N, n, P, DEFF = 1, conf = 0.95, plot = FALSE) {
S2 <- P * (1 - P) * DEFF
Z <- 1 - ((1 - conf)/2)
f <- n/N
VAR <- (1/n) * (1 - f) * S2
CVE <- 100 * sqrt(VAR)/P
ME <- 100 * qnorm(Z) * sqrt(VAR)
if (plot == TRUE) {
pseq <- seq(0, 1, 0.005)
cveseq <- NULL
rmeseq <- NULL
S2seq  <- NULL
varseq <- NULL
for (k in 1:length(pseq)) {
S2seq[k] <- pseq[k] * (1 - pseq[k]) * DEFF
varseq[k] <- (1/n) * (1 - f) * S2seq[k]
cveseq[k] <- 100 * sqrt(varseq[k])/pseq[k]
rmeseq[k] <- 100 * qnorm(Z) * sqrt(varseq[k])
}
par(mfrow = c(1, 2))
plot(pseq, cveseq, type = "l", lty = 1, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Estimated proportion")
points(P, CVE, pch = 8, bg = "blue")
abline(h = CVE, lty = 3)
abline(v = P, lty = 3)
plot(pseq, rmeseq, type = "l", lty = 1, pch = 1, col = 3,
ylab = "Margin of error %", xlab = "Estimated proportion")
points(P, ME, pch = 8, bg = "blue")
abline(h = ME, lty = 3)
abline(v = P, lty = 3)
}
result <- list(cve = CVE, Margin_of_error = ME)
result
}
e4p(N=10000, n=400, P=0.5, plot=TRUE)
e4p(N=10000, n=400, P=0.01, DEFF=3.45, conf=0.99, plot=TRUE)
addinexamples:::reformatAddin()
addinexamples:::reformatAddin()
library(samplesize4surveys)
e4dp <- function(N, n, P1, P2, DEFF = 1, conf = 0.95, T = 0, R = 1, plot = FALSE)
{
Q1 <- 1 - P1
Q2 <- 1 - P2
S2 <- (P1 * Q1 + P2 * Q2) * (1 - (T * R)) * DEFF
Z <- 1 - ((1 - conf)/2)
f <- n/N
VAR <- (1/n) * (1 - f) * S2
CVE <- 100 * sqrt(VAR)/abs(P1 - P2)
ME <- 100 * qnorm(Z) * sqrt(VAR)
if (plot == TRUE)
{
nseq <- seq(1, N, 10)
cveseq <- rep(NA, length(nseq))
meseq <- rep(NA, length(nseq))
for (k in 1:length(nseq))
{
fseq <- nseq[k]/N
varseq <- (1/nseq[k]) * (1 - fseq) * S2
cveseq[k] <- 100 * sqrt(varseq)/abs(P1 - P2)
meseq[k] <- 100 * qnorm(Z) * sqrt(varseq)
}
par(mfrow = c(1, 2))
plot(nseq, cveseq, type = "l", lty = 1, pch = 1, col = 3, ylab = "Coefficient of variation", xlab = "Sample Size")
points(n, CVE, pch = 8, bg = "blue")
abline(h = CVE, lty = 3)
abline(v = n, lty = 3)
plot(nseq, meseq, type = "l", lty = 1, pch = 1, col = 3, ylab = "Margin of error", xlab = "Sample Size")
points(n, ME, pch = 8, bg = "blue")
abline(h = ME, lty = 3)
abline(v = n, lty = 3)
}
msg <- cat("With the parameters of this function: N =", N, "n = ", n, "P1 =", P1, "P2 =", P2, "DEFF = ", DEFF,
"conf =", conf, ". \n             \n             \nThe estimated coefficient of variation is ", CVE, ". \n             \nThe margin of error is",
ME, ". \n \n")
result <- list(cve = CVE, Margin_of_error = ME)
result
}
e4dp(N=10000, n=400, P1=0.5, P2=0.6)
e4dp(N=10000, n=400, P1=0.5, P2=0.6, plot=TRUE)
e4dp(N=10000, n=400, P1=0.5, P2=0.6, DEFF=3.45, conf=0.99, plot=TRUE)
e4dp(N=10000, n=400, P1=0.5, P2=0.6, plot=TRUE)
e4dp(N=10000, n=400, P1=0.5, P2=0.6, DEFF=3.45, conf=0.99, plot=TRUE)
e4dp(N=10000, n=400, P1=0.5, P2=0.6, T=0.5, R=0.5, DEFF=3.45, conf=0.99, plot=TRUE)
e4dp(N=10000, n=400, P1=0.5, P2=0.6, DEFF=3.45, conf=0.99, plot=TRUE)
e4dp(N=10000, n=400, P1=0.5, P2=0.6, T=0.5, R=0.5, DEFF=3.45, conf=0.99, plot=TRUE)
ss4dp(N=100000, P1=0.5, P2=0.55, cve=0.05, me=0.03)
ss4dp = function(N, P1, P2, DEFF = 1, conf = 0.95, cve = 0.05,
me = 0.03, T = 0, R = 1, plot = FALSE) {
Q1 = 1 - P1
Q2 = 1 - P2
S2 <- (P1 * Q1 + P2 * Q2) * (1 - (T * R)) * DEFF
Z = 1 - ((1 - conf)/2)
n.cve <- S2/((P1 - P2)^2 * cve^2 + (S2/N))
n0.me <- (qnorm(Z)^2/me^2) * S2
n.me <- n0.me/(1 + (n0.me/N))
if (plot == TRUE) {
nseq = seq(100, N, 10)
cveseq = rep(NA, length(nseq))
meseq = rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq = nseq[k]/N
varseq = (1/nseq[k]) * (1 - fseq) * S2
cveseq[k] = 100 * sqrt(varseq)/abs(P1 - P2)
meseq[k] = 100 * qnorm(Z) * sqrt(varseq)
}
par(mfrow = c(1, 2))
plot(nseq, cveseq, type = "l", lty = 2, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Sample size")
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
plot(nseq, meseq, type = "l", lty = 2, pch = 1, col = 3,
ylab = "Margin of error %", xlab = "Sample size")
points(n.me, 100 * me, pch = 8, bg = "red")
abline(h = 100 * me, lty = 3)
abline(v = n.me, lty = 3)
}
result <- list(n.cve = ceiling(n.cve), n.me = ceiling(n.me))
result
}
ss4dp(N=100000, P1=0.5, P2=0.55, cve=0.05, me=0.03)
ss4dp(N=100000, P1=0.5, P2=0.55, cve=0.05, me=0.03, plot=TRUE)
ss4dp(N=100000, P1=0.5, P2=0.55, DEFF=3.45, conf=0.99, cve=0.03, me=0.03, plot=TRUE)
ss4dp(N=100000, P1=0.5, P2=0.55, DEFF=3.45, T=0.5, R=0.5, conf=0.99, cve=0.03, me=0.03, plot=TRUE)
ss4dp(N=100000, P1=0.5, P2=0.55, DEFF=3.45, conf=0.99, cve=0.03, me=0.03, plot=TRUE)
ss4dp(N=100000, P1=0.5, P2=0.55, DEFF=3.45, T=0.5, R=0.5, conf=0.99, cve=0.03, me=0.03, plot=TRUE)
ss4dp(N=100000, P1=0.5, P2=0.55, DEFF=3.45, conf=0.99, cve=0.03, me=0.03, plot=TRUE)
ss4dp(N=100000, P1=0.5, P2=0.55, DEFF=3.45, T=0.5, R=0.5, conf=0.99, cve=0.03, me=0.03, plot=TRUE)
ss4dp(N=100000, P1=0.5, P2=0.55, DEFF=3.45, T=0.5, R=-0.5, conf=0.99, cve=0.03, me=0.03, plot=TRUE)
library(samplesize4surveys)
