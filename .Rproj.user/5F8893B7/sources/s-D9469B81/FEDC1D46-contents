varseq <- (1 / nseq[k]) * (1 - fseq) * S2
if (P <= 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(P)*P)
}
if (P > 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(1-P)*(1-P))
}
}
nseq
cveseq
plot(nseq, cveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Sample size"
)
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
ss4pLN <- function(N, P, DEFF = 1, cve = 0.05, plot = FALSE) {
S2 <- P * (1 - P) * DEFF
if (P <= 0.5) {
n.cve <- S2 / (P^2 * (log(P))^2 * cve^2 + (S2 / N))
}
if (P > 0.5) {
n.cve <- S2 / ((1 - P)^2 * (log(1 - P))^2 * cve^2 + (S2 / N))
}
if (plot == TRUE) {
nseq <- seq(100, N, 10)
cveseq <- rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq <- nseq[k] / N
varseq <- (1 / nseq[k]) * (1 - fseq) * S2
if (P <= 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(P)*P)
}
if (P > 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(1-P)*(1-P))
}
}
plot(nseq, cveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Sample size"
)
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
}
result <- ceiling(n.cve)
result
}
ss4pLN(N=10000, P=0.8, cve=0.05)
ss4pLN(N=10000, P=0.8, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.01, DEFF=3.45, cve=0.03, plot=TRUE)
styler:::style_active_file()
pseq <- seq(0.01, 1, 0.01)
pseq
plot(nseq, cveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Sample size"
)
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
pseq <- seq(0.01, 1, 0.01)
ncveseq <- rep(NA, length(pseq))
pseq
ncveseq
for (k in 1:length(pseq)) {
fseq <- nseq[k] / N
S2seq <- pseq[k] * (1 - pseq[k]) * DEFF
if (pseq[k] <= 0.5) {
ncveseq[k] <- S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq[k] / N))
}
if (pseq[k] > 0.5) {
ncveseq[k] <- S2 / ((1 - pseq[k])^2 * (log(1 - pseq[k]))^2 * cve^2 + (S2seq[k] / N))
}
}
fseq
S2seq
pseq <- seq(0.01, 0.99, 0.01)
ncveseq <- rep(NA, length(pseq))
for (k in 1:length(pseq)) {
fseq <- nseq[k] / N
S2seq <- pseq[k] * (1 - pseq[k]) * DEFF
if (pseq[k] <= 0.5) {
ncveseq[k] <- S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq[k] / N))
}
if (pseq[k] > 0.5) {
ncveseq[k] <- S2 / ((1 - pseq[k])^2 * (log(1 - pseq[k]))^2 * cve^2 + (S2seq[k] / N))
}
}
fseq
S2seq
pseq
ncveseq
k=1
k=2
fseq <- nseq[k] / N
fseq
S2seq <- pseq[k] * (1 - pseq[k]) * DEFF
S2seq
if (pseq[k] <= 0.5) {
ncveseq[k] <- S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq[k] / N))
}
if (pseq[k] > 0.5) {
ncveseq[k] <- S2 / ((1 - pseq[k])^2 * (log(1 - pseq[k]))^2 * cve^2 + (S2seq[k] / N))
}
ncveseq
pseq[k]
pseq[k] <= 0.5
ncveseq[k]
S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq[k] / N))
S2seq
pseq[k]^2
(log(pseq[k]))^2
cve
cve^2
(S2seq[k] / N)
N
for (k in 1:length(pseq)) {
fseq <- nseq[k] / N
S2seq <- pseq[k] * (1 - pseq[k]) * DEFF
if (pseq[k] <= 0.5) {
ncveseq[k] <- S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq / N))
}
if (pseq[k] > 0.5) {
ncveseq[k] <- S2seq / ((1 - pseq[k])^2 * (log(1 - pseq[k]))^2 * cve^2 + (S2seq / N))
}
}
ncveseq
plot(pseq, ncveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Sample size"
)
points(P, n.cve, pch = 8, bg = "blue")
abline(h = cve, lty = 3)
plot(pseq, ncveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Required sample size", xlab = "Estimated proportion"
)
plot(pseq, ncveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Required sample size", xlab = "Estimated proportion"
)
points(P, n.cve, pch = 8, bg = "blue")
abline(h = P, lty = 3)
abline(v = P, lty = 3)
abline(h = n.cve, lty = 3)
ss4pLN <- function(N, P, DEFF = 1, cve = 0.05, plot = FALSE) {
S2 <- P * (1 - P) * DEFF
if (P <= 0.5) {
n.cve <- S2 / (P^2 * (log(P))^2 * cve^2 + (S2 / N))
}
if (P > 0.5) {
n.cve <- S2 / ((1 - P)^2 * (log(1 - P))^2 * cve^2 + (S2 / N))
}
if (plot == TRUE) {
nseq <- seq(100, N, 10)
cveseq <- rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq <- nseq[k] / N
varseq <- (1 / nseq[k]) * (1 - fseq) * S2
if (P <= 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(P) * P)
}
if (P > 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(1 - P) * (1 - P))
}
}
par(mfrow = c(1, 2))
plot(nseq, cveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Coefficient of variation %", xlab = "Sample size"
)
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
pseq <- seq(0.01, 0.99, 0.01)
ncveseq <- rep(NA, length(pseq))
for (k in 1:length(pseq)) {
fseq <- nseq[k] / N
S2seq <- pseq[k] * (1 - pseq[k]) * DEFF
if (pseq[k] <= 0.5) {
ncveseq[k] <- S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq / N))
}
if (pseq[k] > 0.5) {
ncveseq[k] <- S2seq / ((1 - pseq[k])^2 * (log(1 - pseq[k]))^2 * cve^2 + (S2seq / N))
}
}
plot(pseq, ncveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Required sample size", xlab = "Estimated proportion"
)
points(P, n.cve, pch = 8, bg = "blue")
abline(h = n.cve, lty = 3)
abline(v = P, lty = 3)
}
result <- ceiling(n.cve)
result
}
ss4pLN(N=10000, P=0.8, cve=0.05)
ss4pLN(N=10000, P=0.8, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.01, DEFF=3.45, cve=0.03, plot=TRUE)
ss4pLN(N=10000, P=0.8, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.2, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.05, DEFF=3.45, cve=0.03, plot=TRUE)
ss4pLN(N=10000, P=0.95, DEFF=3.45, cve=0.03, plot=TRUE)
ss4pLN(N=10000, P=0.8, cve=0.05)
ss4pLN(N=10000, P=0.2, cve=0.05)
ss4pLN(N=10000, P=0.8, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.7, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.3, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.05, DEFF=3.45, cve=0.03, plot=TRUE)
ss4pLN(N=10000, P=0.8, cve=0.10)
ss4pLN(N=10000, P=0.2, cve=0.10)
ss4pLN(N=10000, P=0.7, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.3, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.05, DEFF=3.45, cve=0.03, plot=TRUE)
ss4pLN(N=10000, P=0.95, DEFF=3.45, cve=0.03, plot=TRUE)
ss4pLN <- function(N, P, DEFF = 1, cve = 0.05, plot = FALSE) {
S2 <- P * (1 - P) * DEFF
if (P <= 0.5) {
n.cve <- S2 / (P^2 * (log(P))^2 * cve^2 + (S2 / N))
}
if (P > 0.5) {
n.cve <- S2 / ((1 - P)^2 * (log(1 - P))^2 * cve^2 + (S2 / N))
}
if (plot == TRUE) {
nseq <- seq(100, N, 10)
cveseq <- rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq <- nseq[k] / N
varseq <- (1 / nseq[k]) * (1 - fseq) * S2
if (P <= 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(P) * P)
}
if (P > 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(1 - P) * (1 - P))
}
}
par(mfrow = c(1, 2))
plot(nseq, cveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Transformed coefficient of variation %", xlab = "Sample size"
)
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
pseq <- seq(0.01, 0.99, 0.01)
ncveseq <- rep(NA, length(pseq))
for (k in 1:length(pseq)) {
fseq <- nseq[k] / N
S2seq <- pseq[k] * (1 - pseq[k]) * DEFF
if (pseq[k] <= 0.5) {
ncveseq[k] <- S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq / N))
}
if (pseq[k] > 0.5) {
ncveseq[k] <- S2seq / ((1 - pseq[k])^2 * (log(1 - pseq[k]))^2 * cve^2 + (S2seq / N))
}
}
plot(pseq, ncveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Required sample size", xlab = "Estimated proportion"
)
points(P, n.cve, pch = 8, bg = "blue")
abline(h = n.cve, lty = 3)
abline(v = P, lty = 3)
}
result <- ceiling(n.cve)
result
}
library(samplesize4surveys)
install.packages("testthat")
data(Lucy)
attach(Lucy)
ss4pLN(N, P, DEFF=1, cve=0.03, plot=TRUE)
ss4pLN <- function(N, P, DEFF = 1, cve = 0.05, plot = FALSE) {
S2 <- P * (1 - P) * DEFF
if (P <= 0.5) {
n.cve <- S2 / (P^2 * (log(P))^2 * cve^2 + (S2 / N))
}
if (P > 0.5) {
n.cve <- S2 / ((1 - P)^2 * (log(1 - P))^2 * cve^2 + (S2 / N))
}
if (plot == TRUE) {
nseq <- seq(100, N, 10)
cveseq <- rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq <- nseq[k] / N
varseq <- (1 / nseq[k]) * (1 - fseq) * S2
if (P <= 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(P) * P)
}
if (P > 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(1 - P) * (1 - P))
}
}
par(mfrow = c(1, 2))
plot(nseq, cveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Transformed coefficient of variation %", xlab = "Sample size"
)
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
pseq <- seq(0.01, 0.99, 0.01)
ncveseq <- rep(NA, length(pseq))
for (k in 1:length(pseq)) {
fseq <- nseq[k] / N
S2seq <- pseq[k] * (1 - pseq[k]) * DEFF
if (pseq[k] <= 0.5) {
ncveseq[k] <- S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq / N))
}
if (pseq[k] > 0.5) {
ncveseq[k] <- S2seq / ((1 - pseq[k])^2 * (log(1 - pseq[k]))^2 * cve^2 + (S2seq / N))
}
}
plot(pseq, ncveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Required sample size", xlab = "Estimated proportion",
xlim = (0, N)
)
points(P, n.cve, pch = 8, bg = "blue")
abline(h = n.cve, lty = 3)
abline(v = P, lty = 3)
}
result <- ceiling(n.cve)
result
}
ss4pLN <- function(N, P, DEFF = 1, cve = 0.05, plot = FALSE) {
S2 <- P * (1 - P) * DEFF
if (P <= 0.5) {
n.cve <- S2 / (P^2 * (log(P))^2 * cve^2 + (S2 / N))
}
if (P > 0.5) {
n.cve <- S2 / ((1 - P)^2 * (log(1 - P))^2 * cve^2 + (S2 / N))
}
if (plot == TRUE) {
nseq <- seq(100, N, 10)
cveseq <- rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq <- nseq[k] / N
varseq <- (1 / nseq[k]) * (1 - fseq) * S2
if (P <= 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(P) * P)
}
if (P > 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(1 - P) * (1 - P))
}
}
par(mfrow = c(1, 2))
plot(nseq, cveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Transformed coefficient of variation %", xlab = "Sample size"
)
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
pseq <- seq(0.01, 0.99, 0.01)
ncveseq <- rep(NA, length(pseq))
for (k in 1:length(pseq)) {
fseq <- nseq[k] / N
S2seq <- pseq[k] * (1 - pseq[k]) * DEFF
if (pseq[k] <= 0.5) {
ncveseq[k] <- S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq / N))
}
if (pseq[k] > 0.5) {
ncveseq[k] <- S2seq / ((1 - pseq[k])^2 * (log(1 - pseq[k]))^2 * cve^2 + (S2seq / N))
}
}
plot(pseq, ncveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Required sample size", xlab = "Estimated proportion",
xlim = c(0, N)
)
points(P, n.cve, pch = 8, bg = "blue")
abline(h = n.cve, lty = 3)
abline(v = P, lty = 3)
}
result <- ceiling(n.cve)
result
}
ss4pLN(N=10000, P=0.8, cve=0.10)
ss4pLN(N=10000, P=0.2, cve=0.10)
ss4pLN(N=10000, P=0.7, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.3, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.05, DEFF=3.45, cve=0.03, plot=TRUE)
plot(pseq, ncveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Required sample size", xlab = "Estimated proportion",
ylim = c(0, N)
)
ss4pLN <- function(N, P, DEFF = 1, cve = 0.05, plot = FALSE) {
S2 <- P * (1 - P) * DEFF
if (P <= 0.5) {
n.cve <- S2 / (P^2 * (log(P))^2 * cve^2 + (S2 / N))
}
if (P > 0.5) {
n.cve <- S2 / ((1 - P)^2 * (log(1 - P))^2 * cve^2 + (S2 / N))
}
if (plot == TRUE) {
nseq <- seq(100, N, 10)
cveseq <- rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq <- nseq[k] / N
varseq <- (1 / nseq[k]) * (1 - fseq) * S2
if (P <= 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(P) * P)
}
if (P > 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(1 - P) * (1 - P))
}
}
par(mfrow = c(1, 2))
plot(nseq, cveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Transformed coefficient of variation %", xlab = "Sample size"
)
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
pseq <- seq(0.01, 0.99, 0.01)
ncveseq <- rep(NA, length(pseq))
for (k in 1:length(pseq)) {
fseq <- nseq[k] / N
S2seq <- pseq[k] * (1 - pseq[k]) * DEFF
if (pseq[k] <= 0.5) {
ncveseq[k] <- S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq / N))
}
if (pseq[k] > 0.5) {
ncveseq[k] <- S2seq / ((1 - pseq[k])^2 * (log(1 - pseq[k]))^2 * cve^2 + (S2seq / N))
}
}
plot(pseq, ncveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Required sample size", xlab = "Estimated proportion",
ylim = c(0, N)
)
points(P, n.cve, pch = 8, bg = "blue")
abline(h = n.cve, lty = 3)
abline(v = P, lty = 3)
}
result <- ceiling(n.cve)
result
}
ss4pLN(N=10000, P=0.8, cve=0.10)
ss4pLN(N=10000, P=0.2, cve=0.10)
ss4pLN(N=10000, P=0.7, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.3, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.05, DEFF=3.45, cve=0.03, plot=TRUE)
ss4pLN(N=10000, P=0.95, DEFF=3.45, cve=0.03, plot=TRUE)
##########################
# Example with Lucy data #
##########################
data(Lucy)
attach(Lucy)
ss4pLN <- function(N, P, DEFF = 1, cve = 0.05, plot = FALSE) {
S2 <- P * (1 - P) * DEFF
if (P <= 0.5) {
n.cve <- S2 / (P^2 * (log(P))^2 * cve^2 + (S2 / N))
}
if (P > 0.5) {
n.cve <- S2 / ((1 - P)^2 * (log(1 - P))^2 * cve^2 + (S2 / N))
}
if (plot == TRUE) {
nseq <- seq(100, N, 10)
cveseq <- rep(NA, length(nseq))
for (k in 1:length(nseq)) {
fseq <- nseq[k] / N
varseq <- (1 / nseq[k]) * (1 - fseq) * S2
if (P <= 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(P) * P)
}
if (P > 0.5) {
cveseq[k] <- 100 * sqrt(varseq) / (-log(1 - P) * (1 - P))
}
}
par(mfrow = c(1, 2))
plot(nseq, cveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Transformed coefficient of variation %", xlab = "Sample size"
)
points(n.cve, 100 * cve, pch = 8, bg = "blue")
abline(h = 100 * cve, lty = 3)
abline(v = n.cve, lty = 3)
pseq <- seq(0.01, 0.99, 0.01)
ncveseq <- rep(NA, length(pseq))
for (k in 1:length(pseq)) {
fseq <- nseq[k] / N
S2seq <- pseq[k] * (1 - pseq[k]) * DEFF
if (pseq[k] <= 0.5) {
ncveseq[k] <- S2seq / (pseq[k]^2 * (log(pseq[k]))^2 * cve^2 + (S2seq / N))
}
if (pseq[k] > 0.5) {
ncveseq[k] <- S2seq / ((1 - pseq[k])^2 * (log(1 - pseq[k]))^2 * cve^2 + (S2seq / N))
}
}
plot(pseq, ncveseq,
type = "l", lty = 2, pch = 1, col = 3,
ylab = "Required sample size", xlab = "Estimated proportion",
ylim = c(0, N/2)
)
points(P, n.cve, pch = 8, bg = "blue")
abline(h = n.cve, lty = 3)
abline(v = P, lty = 3)
}
result <- ceiling(n.cve)
result
}
ss4pLN(N=10000, P=0.2, cve=0.10)
ss4pLN(N=10000, P=0.7, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.3, cve=0.05, plot=TRUE)
ss4pLN(N=10000, P=0.05, DEFF=3.45, cve=0.03, plot=TRUE)
